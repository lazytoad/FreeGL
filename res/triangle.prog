/*struct Point
{
    vec3 v;
    vec2 t;
};

struct TriStruct
{
	Point p[3];
};*/

#define pointSize 5
#define triSize 15

layout(rgba8, binding = 0) uniform image2D destTex;
layout(rgba8, binding = 2) uniform image2D srcTex;

layout(binding = 0) readonly buffer indata {
	float elements[];
};

layout(packed, binding = 1) writeonly buffer indata2 {
	float outdata[40];
};

uniform vec2 add;
uniform vec2 scale;

layout( local_size_x = 1024 ) in;

vec3 BaryCoords(in vec2 p, in vec2 tri[3])
{
	vec2 p10 = tri[1] - tri[0];
	vec2 p20 = tri[2] - tri[0];
	float area2 = p10.x * p20.y - p10.y * p20.x;

	if (area2 < 0.1)
		return vec3(-1, -1, -1);

	float s = 1/(area2)*(tri[0].y*tri[2].x - tri[0].x*tri[2].y + (p20.y)*p.x - (p20.x)*p.y);
	float t = 1/(area2)*(tri[0].x*tri[1].y - tri[0].y*tri[1].x - (p10.y)*p.x + (p10.x)*p.y);

	return vec3(s, t, 1 - s - t);
}

void main()
{
	uint k = gl_GlobalInvocationID.x;
	uint triangles = elements.length() / 15;

	//imageStore(destTex, ivec2(gl_GlobalInvocationID.xy), vec4(1, 1, 1, 1));
	if (k >= triangles)
		return;

	//imageStore(destTex, ivec2(gl_GlobalInvocationID.xy), vec4(0, 1, 0, 1));



	vec2 tri[3];	

	for(uint i = 0; i < 3; ++i)
	{
		tri[i] = vec2(elements[k * triSize + i * pointSize + 0], elements[k * triSize + i * pointSize + 1]) * scale + add;
	}

	
	
	outdata[15] = elements.length();

	vec2 lo = round(tri[2]);
	vec2 hi = round(tri[2]);
	for(uint i = 0; i < 2; ++i)
	{
		lo = min(lo, round(tri[i]));
		hi = max(hi, round(tri[i]));
	}
	//outdata[0] = hi.x;
	//outdata[1] = hi.y;
	//outdata[2] = lo.x;
	//outdata[3] = lo.y;
	//hi = vec2(0, 0);
	//hi = max(hi, vec2(1, 0.5));
	//lo = vec2(0, 0) * scale + add;

	

	//vec4 bad = vec4(elements.length() * 0.5, elements.length() * 0.5, 0.1, 1);
	
	//if (hi.x < 10)
	//	bad.x = 1;
	//if (hi.y < 10)
	//	bad.y = 1;
	
	

	for (float j = lo.y; j <= hi.y; ++j)
	{
		for (float i = lo.x; i < hi.x; ++i)
		{
			vec2 p = vec2(i, j);
			vec3 bariCoords =  BaryCoords(p, tri);

			if (bariCoords.x > 0 && bariCoords.y > 0 && bariCoords.z > 0)
			{
				vec2 texPos = vec2(elements[k * triSize + 0 * pointSize + 3], elements[k * triSize + 0 * pointSize + 4])  * bariCoords.z +
								vec2(elements[k * triSize + 1 * pointSize + 3], elements[k * triSize + 1 * pointSize + 4]) * bariCoords.x +
								vec2(elements[k * triSize + 2 * pointSize + 3], elements[k * triSize + 2 * pointSize + 4]) * bariCoords.y;
				ivec2 iTexPos = ivec2(texPos * 512);
				vec4 value = imageLoad(srcTex, iTexPos);//ivec2(11, 11));
				imageStore(destTex, ivec2(p), value);
			}
			/*else
			{
				vec4 value = vec4(0, 0.5, 0.5, 1);
				imageStore(destTex, ivec2(p), value);
			}*/
		}
	}
}