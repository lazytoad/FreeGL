#define pointSize 5
#define triSize 15

struct RasterInfo
{
	int bot, mid, top, isLeft;
	float arg1, arg2;
	vec2 p20, p10;
};

layout(binding = 0) readonly buffer indata {
	float elements[];
};

layout(binding = 3) writeonly buffer rasterInfo {
	writeonly RasterInfo rinfo[];
};

uniform uint tSz;

uniform mat4 transform;

layout( local_size_x = #GROUPS ) in;
/*
vec3 BaryCoords(in vec2 p, in vec2 tri[3])
{
	vec2 p10 = tri[1] - tri[0];
	vec2 p20 = tri[2] - tri[0];
	float area2 = p10.x * p20.y - p10.y * p20.x;

	if (area2 < 0.1)
		return vec3(-1, -1, -1);

	float s = 1 / (area2)*(tri[0].y*tri[2].x - tri[0].x*tri[2].y + (p20.y)*p.x - (p20.x)*p.y);
	float t = 1 / (area2)*(tri[0].x*tri[1].y - tri[0].y*tri[1].x - (p10.y)*p.x + (p10.x)*p.y);

	return vec3(s, t, 1 - s - t);
}*/

void process(uint k);

void main()
{
	/*uint perGroup = tSz / #GROUPS;
	uint rest = tSz % #GROUPS;
	uint currentGroup = gl_GlobalInvocationID.x;
	uint from = currentGroup * perGroup;
	uint to = from + perGroup;
	if (currentGroup < rest)
	{
		from += currentGroup;
		to += currentGroup + 1;
	}
	else if (currentGroup >= rest)
	{
		from += rest;
		to += rest;
	}
	for (uint k = from; k < to; ++k)
	{
		process(k);
	}*/
	process(gl_GlobalInvocationID.x);
}

void process(uint k)
{
	//uint k = gl_GlobalInvocationID.x;
	uint triangles = elements.length() / triSize;

	//imageStore(destTex, ivec2(gl_GlobalInvocationID.xy), vec4(1, 1, 1, 1));
	if (k >= triangles)
		return;

	//imageStore(destTex, ivec2(gl_GlobalInvocationID.xy), vec4(0, 1, 0, 1));

	uint base = k * triSize;

	//vec2 tri[3];
	vec2 tex[3];
	vec3 pos3d[3];

	//vec

	rinfo[k].bot = #HEIGHT;

	for(uint i = 0; i < 3; ++i)
	{
		pos3d[i] = (transform * vec4(elements[base + i * pointSize + 0], elements[base + i * pointSize + 1],
					elements[base + i * pointSize + 2], 1.0f)).xyz;
		tex[i] = vec2(elements[base + i * pointSize + 3], elements[base + i * pointSize + 4]);
	}
	int topi = 2; // top index
	int boti = 2; // bot index
	vec2 lo = round(pos3d[2].xy);
	vec2 hi = round(pos3d[2].xy);
	for(int i = 0; i < 2; ++i)
	{
		topi = pos3d[i].y > pos3d[topi].y ? i : topi;
		boti = pos3d[i].y < pos3d[boti].y ? i : boti;
		lo = min(lo, (floor(pos3d[i].xy)));
		hi = max(hi, (ceil(pos3d[i].xy)));
	}

	int lefti = 3 - topi - boti; // the one that is left is the mid index


	if (hi.x < 0 || hi.y < 0 || lo.x > float(#WIDTH)  || lo.y > float(#HEIGHT))
		return;

	vec2 p10 = pos3d[1].xy - pos3d[0].xy;
	vec2 p20 = pos3d[2].xy - pos3d[0].xy;
	float area2 = p10.x * p20.y - p10.y * p20.x;
	//if (area2 <= 0)
	//	return;

	area2 = 1.0 / area2;

	float arg1 = pos3d[0].y*pos3d[2].x - pos3d[0].x*pos3d[2].y;
	float arg2 = pos3d[0].x*pos3d[1].y - pos3d[0].y*pos3d[1].x;

	arg1 *= area2;
	arg2 *= area2;
	p20 *= area2;
	p10 *= area2;

	vec2 ptb = pos3d[topi].xy - pos3d[boti].xy;
	vec2 plb = pos3d[lefti].xy - pos3d[boti].xy;
	bool isLeft = ptb.x * plb.y - ptb.y * plb.x > 0;

	int mid = int (pos3d[lefti].y + 0.5f);
	int top = int (pos3d[topi].y + 0.5f);
	int bot = int (pos3d[boti].y + 0.5f);

	rinfo[k].bot = bot;
	rinfo[k].mid = mid;
	rinfo[k].top = top;
	rinfo[k].isLeft = int(isLeft);
	rinfo[k].arg1 = arg1;
	rinfo[k].arg2 = arg2;
	rinfo[k].p10 = p10;
	rinfo[k].p20 = p20;

	return;
}